name: build-push-docker-nightly

on:
  # trigger nightly builds at 8am UTC
  schedule:
    - cron: '0 8 * * *'
  # allows this workflow to be triggered manually from the actions tab
  workflow_dispatch:


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": false,
              "features": {
                "containerd-snapshotter": true
              }
            }
          # version: '28.0.4' # Specify the Docker version you want to use
          # experimental: true # Enable experimental features if needed
          # install-buildx: true # Ensure Buildx is installed
          # install-qemu: true # Ensure QEMU is installed
          # run-args: --privileged # Additional arguments for the Docker daemon
          # timeout: 30 # Timeout in seconds for setting up Docker
          # retries: 3 # Number of retries if setup fails
          # retry-delay: 10 # Delay in seconds between retries
          # retry-backoff: 2 # Backoff multiplier for retries
          # cleanup: true # Clean up Docker resources after the job
          # cleanup-level: full # Level of cleanup: basic, intermediate, full
          # log-level: info # Log level: debug, info, warn, error
          # log-format: text # Log format: text, json

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Git Short Commit SHA
        run: |
          GIT_COMMIT_SHA_SHORT="$(git rev-parse --short ${{ github.sha }})"
          echo "git_commit_sha_short=$GIT_COMMIT_SHA_SHORT" >> $GITHUB_ENV

      - name: Build Docker image
        id: build_image
        uses: docker/build-push-action@v6
        env:
          SOURCE_DATE_EPOCH: 0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # labels: |
          #   org.opencontainers.image.source=${{ github.repository }}
          #   org.opencontainers.image.revision=${{ github.sha }}
          #   org.opencontainers.image.created=${{ steps.build_image.outputs.buildkitd-started-at }}
          #   org.opencontainers.image.version=${{ github.sha }}
          push: false # Do not push yet
          load: true # Load the image into the local Docker cache
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          tags: ${{ vars.DOCKERHUB_REPOSITORY }}:temp_build # Temporary tag for comparison
          outputs: type=image,name=${{ vars.DOCKERHUB_REPOSITORY }}:temp_build,push=false,digestfile=/tmp/temp_build_image_digest.txt

      - name: Compare Image Digest With Latest Image
        id: compare_digest_with_latest
        run: |
          IMAGE_BUILT_NAME="${{ vars.DOCKERHUB_REPOSITORY }}:temp_build"
          IMAGE_PULLED_NAME="${{ vars.DOCKERHUB_REPOSITORY }}:latest"
          IMAGE_BUILT_DIGEST=$(docker inspect $IMAGE_BUILT_NAME | jq -r '.[].RepoDigests[0] | split("@") | .[1]' || echo "")
          IMAGE_PULLED_DIGEST=$(docker pull $IMAGE_PULLED_NAME > /dev/null 2>&1 && docker inspect $IMAGE_PULLED_NAME | jq -r '.[].RepoDigests[0] | split("@") | .[1]' || echo "")
          echo "Built digest for $IMAGE_BUILT_NAME: $IMAGE_BUILT_DIGEST"
          echo "Pulled digest for $IMAGE_PULLED_NAME: $IMAGE_PULLED_DIGEST"
          if [ "$IMAGE_BUILT_DIGEST" == "$IMAGE_PULLED_DIGEST" ]; then
            echo "Digests match. No push needed."
            echo "should match the following images:"
            echo "needs_push=false" >> $GITHUB_OUTPUT
          else
            echo "Digests differ. Push needed."
            echo "will push the following images:"
            echo "needs_push=true" >> $GITHUB_OUTPUT
          fi
          echo "${{ vars.DOCKERHUB_REPOSITORY }}:latest"
          echo "${{ vars.DOCKERHUB_REPOSITORY }}:nightly-${{ env.git_commit_sha_short }}"
          echo ""
          echo "DEBUG: step output digest=$(cat /tmp/temp_build_image_digest.txt)"
          # Clean up temporary image
          docker rmi ${{ vars.DOCKERHUB_REPOSITORY }}:temp_build || true

      - name: Log in to Docker Hub
        if: steps.compare_digest_with_latest.outputs.needs_push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.compare_digest_with_latest.outputs.needs_push == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # labels: |
          #   org.opencontainers.image.source=${{ github.repository }}
          #   org.opencontainers.image.revision=${{ github.sha }}
          #   org.opencontainers.image.created=${{ steps.build_image.outputs.buildkitd-started-at }}
          #   org.opencontainers.image.version=${{ github.sha }}
          push: true
          load: true # Load the image into the local Docker cache
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          tags: |
            ${{ vars.DOCKERHUB_REPOSITORY }}:nightly-${{ env.git_commit_sha_short }}
            ${{ vars.DOCKERHUB_REPOSITORY }}:latest
